#version 410

layout(triangles, equal_spacing, ccw) in;

uniform mat4 view;
uniform mat4 view_proj;
uniform mat4 model_view;
uniform mat3 normal_matrix;

uniform sampler2D displacement_map;

in vec3 frag_pos_tcs[];
in vec2 tex_coords_tcs[];
in vec3 normal_tcs[];

out vec3 frag_pos;
out vec2 tex_coords;
out vec3 normal;
out vec3 view_dir;

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
  return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
  return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

void main()
{
  tex_coords = interpolate2D(tex_coords_tcs[0], tex_coords_tcs[1], tex_coords_tcs[2]);
  normal = interpolate3D(normal_tcs[0], normal_tcs[1], normal_tcs[2]);
  frag_pos = interpolate3D(frag_pos_tcs[0], frag_pos_tcs[1], frag_pos_tcs[2]);
  frag_pos += vec3(texture2D(displacement_map, tex_coords).x) * normal * 0.15;
  normal = normal_matrix * normal;
  vec3 tmp_frag_pos = frag_pos;

  gl_Position = view_proj * vec4(frag_pos, 1.0);
  frag_pos = (view * vec4(frag_pos, 1.0)).xyz;

  view_dir = frag_pos + normal - tmp_frag_pos;
}
